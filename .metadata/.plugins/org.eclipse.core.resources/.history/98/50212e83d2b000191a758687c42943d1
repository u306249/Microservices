package com.motion.vote;

import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;

public class MotionTask {

	private Set<String> voters = new HashSet<String>();
	private String motionName = "";
	private int forVote = 0;
	private int againstVote = 0;
	private String motionPassed = "PASSED";
	
	public MotionTask(String motionName) {
		this.motionName = motionName;
	}
	public MotionStatus process(String input,Scanner scanner) {

		char operation = input.charAt(0);

		switch (operation) {
			case '1': // Cast vote
				System.out.println("Enter your(voter) name : ");
				String voter = scanner.next();
				System.out.println("Enter your vote(Y/N) : ");
				String vote = scanner.next();

				if(!voters.contains(voter)) {//If a voter votes multiple time that would be still counted as one vote
					if(vote.equalsIgnoreCase("Y")) {
						forVote++;
					}else if(vote.equalsIgnoreCase("N")) {
						againstVote++;
					}
				}
				if((againstVote+forVote)==101) { //If total number of votes reaches 101, Motion will be closed
					process("3",scanner);
				}
				System.out.println("Your vote is casted, thank you.");
				break;
			case '2': // Query Results
				System.out.println("Motion Name : "+motionName);
				System.out.println("No of votes for : "+forVote);
				System.out.println("No of votes against : "+againstVote);
				break;
			case '3': // Exit
				System.out.println("Motion Name : "+motionName+" is closed for voting");
				System.out.println("No of votes for : "+forVote);
				System.out.println("No of votes against : "+againstVote);
				
				//Determining the result of the voting
				if(forVote>againstVote) {
					motionPassed = "FAILED";
				}else if(forVote == againstVote){
					motionPassed = "TIE";
					System.out.println("Its a tie, ");
				}
				break;
			default :
				System.out.println("Invalid Option.");
			
		} 

	}
	public String getMotionPassed() {
		return motionPassed;
	}

}
